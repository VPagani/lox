print "while";

var i = 0;
while (i < 10) {
    print i;
    i = i + 1;
}

print "";

print "for";

for (var i = 0; i < 10; i = i + 1) print i;


// Chapter 9 Challenge 2
/*

Answer:
    Using recursion! Tail call optimization is usually necessary to prevent
    exceeding the call stack. JavaScript has that.

Example code:
    fun printNumbers(n) {
        print n;

        if (n == 0) return;

        printNumbers(n-1);
    }

    printNumbers(10); // 10 9 8 ... 2 1 0

*/
